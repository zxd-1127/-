#include<bits/stdc++.h>
#define rg register
#include<time.h>
#include<Windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>


using namespace std;

typedef long long ll;
const int mod = 998244353, g = 3;
const int maxn = 1e6 + 10;

inline int qpow(int x, int k)
{
    int ans = 1;
    while (k)
    {
        if (k & 1)
            ans = (ll)ans * x % mod;
        x = (ll)x * x % mod, k >>= 1;
    }
    return ans;
}

inline int module(int x, int y)
{
    x += y;
    if (x >= mod)
        x -= mod;
    return x;
}

int rev[4 * maxn];
inline void NTT(int* t, int lim, int type)
{
    for (rg int i = 0; i < lim; ++i)
        if (i < rev[i])
            swap(t[i], t[rev[i]]);
    for (rg int i = 1; i < lim; i <<= 1)
    {
        int gn = qpow(g, (mod - 1) / (i << 1));
        if (type == -1)
            gn = qpow(gn, mod - 2);
        for (rg int j = 0; j < lim; j += (i << 1))
        {
            int gi = 1;
            for (rg int k = 0; k < i; ++k, gi = (ll)gi * gn % mod)
            {
                int x = t[j + k], y = (ll)gi * t[j + i + k] % mod;
                t[j + k] = module(x, y);
                t[j + i + k] = module(x, mod - y);
            }
        }
    }
    if (type == -1)
    {
        int inv = qpow(lim, mod - 2);
        for (rg int i = 0; i < lim; ++i)
            t[i] = (ll)t[i] * inv % mod;
    }
}
    
int X[4 * maxn], Y[4 * maxn];
inline void mul(int* x, int* y, int n, int m)
{
    memset(X, 0, sizeof(X));
    memset(Y, 0, sizeof(Y));
    int lim = 1, L = 0;  //L=0必须写，局部变量默认值很可能不是0
    while (lim <= n + m) lim <<= 1, L++;   //lim为大于(n+m)的2的幂，所以最多需要4倍空间
    for (int i = 0; i < lim; i++) rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (L - 1));
    for (rg int i = 0; i < lim; ++i) X[i] = x[i], Y[i] = y[i];
    NTT(X, lim, 1);
    NTT(Y, lim, 1);
    for (rg int i = 0; i < lim; ++i) X[i] = (ll)X[i] * Y[i] % mod;
    NTT(X, lim, -1);
    for (rg int i = 0; i < lim; ++i) x[i] = X[i];
}


int n=256, m=256;
int a[4 * maxn] = { 2316, 2340, 9656, 1312, 4327, 8589, 9659, 5437, 2221, 5729, 1673, 4339, 7357, 5306, 5544, 4625, 4322, 7361, 6203, 7126, 3767, 6341, 4553, 5730, 1649, 2983, 3019, 3770, 9464, 4246, 8247, 1016, 8404, 2251, 6305, 3221, 9340, 8295, 9601, 3203, 2377, 6509, 4266, 7948, 8543, 7675, 5851, 1244, 7556, 4154, 9724, 2585, 1072, 9180, 7617, 3726, 6923, 4831, 4250, 3337, 1416, 6426, 9442, 6590, 1119, 9172, 3791, 6387, 8982, 6517, 7705, 3641, 6531, 8625, 3116, 1528, 1912, 4187, 5474, 1844, 2487, 7555, 1899, 4565, 2001, 1268, 4922, 1375, 4604, 9415, 3836, 9717, 4072, 8531, 6444, 4505, 1166, 6966, 3011, 6047, 6924, 9319, 2703, 9123, 1510, 9617, 6612, 6772, 4864, 9255, 8593, 7872, 1258, 9257, 5452, 9015, 9348, 2893, 2053, 9643, 7458, 4176, 3080, 9907, 5601, 7925, 2761, 5254, 8212, 6883, 1591, 3700, 4610, 7027, 6908, 7515, 8263, 3937, 9868, 1972, 5769, 2357, 1025, 5280, 2550, 1887, 3805, 4959, 9354, 3058, 4390, 9660, 4875, 7250, 9054, 2145, 3866, 5111, 4417, 5440, 6961, 3771, 5026, 3985, 1092, 6758, 4914, 3281, 6036, 5245, 7718, 9668, 1675, 3817, 7617, 1427, 4589, 8923, 9776, 4510, 3469, 7098, 1460, 4042, 3371, 3090, 3312, 4512, 1663, 9129, 9180, 5784, 2233, 7227, 4727, 2454, 3605, 7695, 9517, 8405, 4893, 5015, 5956, 4462, 2149, 5558, 5647, 9232, 3722, 4028, 5632, 6436, 9630, 2359, 2524, 5346, 8832, 4770, 5478, 4511, 8215, 3020, 4847, 1137, 5359, 5670, 3595, 7471, 8353, 6224, 3890, 1248, 4688, 4053, 9491, 4200, 2353, 2397, 1569, 9514, 5610, 4303, 9385, 6789, 5067, 8327, 6444, 1443, 4789, 5763, 9166, 8715, 8957, 6420, 8354, 6881 };
int b[4 * maxn] = { 1880, 2140, 6827, 8956, 2271, 4102, 2630, 8044, 7637, 7633, 1751, 5977, 9823, 1764, 4524, 3609, 6829, 4896, 6098, 8530, 3591, 4661, 9728, 4346, 3986, 7643, 4755, 8411, 9678, 1844, 8576, 7835, 6078, 7015, 6515, 4595, 9112, 6577, 7582, 3871, 3657, 2137, 7717, 1746, 5050, 5485, 9521, 5801, 3802, 2005, 7069, 2373, 4500, 7988, 5097, 8711, 8330, 9829, 2910, 6625, 4417, 6353, 2777, 4130, 2038, 7234, 5654, 7896, 7916, 1898, 3586, 8203, 5131, 3116, 9029, 2095, 5323, 3852, 6315, 5067, 1404, 7568, 6221, 8351, 9205, 1246, 6103, 8659, 3584, 7373, 8478, 1513, 8397, 1314, 5241, 3144, 9600, 1760, 4913, 4327, 8021, 4075, 7454, 1934, 3726, 8583, 6103, 9989, 3661, 5431, 7712, 3704, 1320, 6267, 9449, 9967, 6330, 3438, 6878, 1534, 8853, 7746, 5643, 4457, 1010, 1580, 8941, 9311, 6658, 4220, 5481, 8360, 5946, 9895, 2363, 2809, 6032, 8983, 8538, 1780, 1710, 6751, 6138, 6627, 9234, 3038, 3373, 9525, 3286, 1954, 5526, 5134, 3153, 6769, 6523, 8486, 6218, 6260, 8430, 2738, 8811, 5695, 8061, 4653, 4582, 7965, 3281, 6171, 2923, 9276, 8155, 5302, 3468, 5127, 9069, 7314, 9653, 2963, 6228, 9781, 3818, 2897, 6615, 3680, 8127, 4134, 5494, 5779, 3787, 4022, 7478, 8821, 9332, 4057, 1992, 1376, 6408, 4204, 6859, 4311, 8788, 8027, 9881, 3232, 9769, 4189, 1166, 4376, 5392, 7912, 1658, 8937, 3586, 4598, 2534, 6793, 2105, 8699, 7766, 6181, 1127, 4603, 4470, 5305, 6634, 4434, 4939, 9429, 4622, 7373, 8315, 8425, 2499, 3987, 3224, 7520, 7909, 7743, 9669, 4398, 1697, 7668, 6110, 6696, 1899, 9883, 6185, 6960, 8950, 7067, 4263, 6380, 3893, 4082, 9366, 7705 };

int main()
{




    FILE* fpWrite = fopen("F:\\Zxd_cpplearn\\NTT_pol_mul\\out3.txt", "a");//NTT的结果文件





    //-----------计时参数----------
    LARGE_INTEGER ntime;
    LARGE_INTEGER begintime;
    LARGE_INTEGER endtime;
    double time;
    int i ;
    QueryPerformanceFrequency(&ntime);

    for (i = 0; i < 1000000; i++) {

      


        QueryPerformanceCounter(&begintime);

        mul(a, b, n, m);

        QueryPerformanceCounter(&endtime);

        time = (double)(endtime.QuadPart - begintime.QuadPart) / (double)ntime.QuadPart;

        fprintf(fpWrite, "%f ", time);


        printf("\n%d\n", i);
     //   printf("%f", time);

     

    }

   

    //for (int i = 0; i <= n + m; i++)  printf("%d ", a[i]);




    return 0;
}
